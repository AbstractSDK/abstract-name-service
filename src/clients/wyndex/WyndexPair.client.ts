/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.28.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { AssetInfo, Binary, Uint128, InstantiateMsg, FeeConfig, StakeConfig, ConverterConfig, ExecuteMsg, Decimal, Cw20ReceiveMsg, Asset, QueryMsg, SamplePeriod, Addr, ConfigResponse, AssetInfoValidated, CumulativePricesResponse, AssetValidated, PairType, PairInfo, PoolResponse, ReverseSimulationResponse, ArrayOfAssetValidated, SimulationResponse, SpotPriceResponse, SpotPricePredictionResponse, TwapResponse } from "./WyndexPair.types";
export interface WyndexPairReadOnlyInterface {
  contractAddress: string;
  pair: () => Promise<PairInfo>;
  pool: () => Promise<PoolResponse>;
  config: () => Promise<ConfigResponse>;
  share: ({
    amount
  }: {
    amount: Uint128;
  }) => Promise<ArrayOfAssetValidated>;
  simulation: ({
    askAssetInfo,
    offerAsset,
    referral,
    referralCommission
  }: {
    askAssetInfo?: AssetInfo;
    offerAsset: Asset;
    referral: boolean;
    referralCommission?: Decimal;
  }) => Promise<SimulationResponse>;
  reverseSimulation: ({
    askAsset,
    offerAssetInfo,
    referral,
    referralCommission
  }: {
    askAsset: Asset;
    offerAssetInfo?: AssetInfo;
    referral: boolean;
    referralCommission?: Decimal;
  }) => Promise<ReverseSimulationResponse>;
  cumulativePrices: () => Promise<CumulativePricesResponse>;
  twap: ({
    duration,
    endAge,
    startAge
  }: {
    duration: SamplePeriod;
    endAge?: number;
    startAge: number;
  }) => Promise<TwapResponse>;
  queryComputeD: () => Promise<Uint128>;
  spotPrice: ({
    ask,
    offer
  }: {
    ask: AssetInfo;
    offer: AssetInfo;
  }) => Promise<SpotPriceResponse>;
  spotPricePrediction: ({
    ask,
    iterations,
    maxTrade,
    offer,
    targetPrice
  }: {
    ask: AssetInfo;
    iterations: number;
    maxTrade: Uint128;
    offer: AssetInfo;
    targetPrice: Decimal;
  }) => Promise<SpotPricePredictionResponse>;
}
export class WyndexPairQueryClient implements WyndexPairReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.pair = this.pair.bind(this);
    this.pool = this.pool.bind(this);
    this.config = this.config.bind(this);
    this.share = this.share.bind(this);
    this.simulation = this.simulation.bind(this);
    this.reverseSimulation = this.reverseSimulation.bind(this);
    this.cumulativePrices = this.cumulativePrices.bind(this);
    this.twap = this.twap.bind(this);
    this.queryComputeD = this.queryComputeD.bind(this);
    this.spotPrice = this.spotPrice.bind(this);
    this.spotPricePrediction = this.spotPricePrediction.bind(this);
  }

  pair = async (): Promise<PairInfo> => {
    return this.client.queryContractSmart(this.contractAddress, {
      pair: {}
    });
  };
  pool = async (): Promise<PoolResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      pool: {}
    });
  };
  config = async (): Promise<ConfigResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      config: {}
    });
  };
  share = async ({
    amount
  }: {
    amount: Uint128;
  }): Promise<ArrayOfAssetValidated> => {
    return this.client.queryContractSmart(this.contractAddress, {
      share: {
        amount
      }
    });
  };
  simulation = async ({
    askAssetInfo,
    offerAsset,
    referral,
    referralCommission
  }: {
    askAssetInfo?: AssetInfo;
    offerAsset: Asset;
    referral: boolean;
    referralCommission?: Decimal;
  }): Promise<SimulationResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      simulation: {
        ask_asset_info: askAssetInfo,
        offer_asset: offerAsset,
        referral,
        referral_commission: referralCommission
      }
    });
  };
  reverseSimulation = async ({
    askAsset,
    offerAssetInfo,
    referral,
    referralCommission
  }: {
    askAsset: Asset;
    offerAssetInfo?: AssetInfo;
    referral: boolean;
    referralCommission?: Decimal;
  }): Promise<ReverseSimulationResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      reverse_simulation: {
        ask_asset: askAsset,
        offer_asset_info: offerAssetInfo,
        referral,
        referral_commission: referralCommission
      }
    });
  };
  cumulativePrices = async (): Promise<CumulativePricesResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      cumulative_prices: {}
    });
  };
  twap = async ({
    duration,
    endAge,
    startAge
  }: {
    duration: SamplePeriod;
    endAge?: number;
    startAge: number;
  }): Promise<TwapResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      twap: {
        duration,
        end_age: endAge,
        start_age: startAge
      }
    });
  };
  queryComputeD = async (): Promise<Uint128> => {
    return this.client.queryContractSmart(this.contractAddress, {
      query_compute_d: {}
    });
  };
  spotPrice = async ({
    ask,
    offer
  }: {
    ask: AssetInfo;
    offer: AssetInfo;
  }): Promise<SpotPriceResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      spot_price: {
        ask,
        offer
      }
    });
  };
  spotPricePrediction = async ({
    ask,
    iterations,
    maxTrade,
    offer,
    targetPrice
  }: {
    ask: AssetInfo;
    iterations: number;
    maxTrade: Uint128;
    offer: AssetInfo;
    targetPrice: Decimal;
  }): Promise<SpotPricePredictionResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      spot_price_prediction: {
        ask,
        iterations,
        max_trade: maxTrade,
        offer,
        target_price: targetPrice
      }
    });
  };
}
export interface WyndexPairInterface extends WyndexPairReadOnlyInterface {
  contractAddress: string;
  sender: string;
  receive: ({
    amount,
    msg,
    sender
  }: {
    amount: Uint128;
    msg: Binary;
    sender: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  provideLiquidity: ({
    assets,
    receiver,
    slippageTolerance
  }: {
    assets: Asset[];
    receiver?: string;
    slippageTolerance?: Decimal;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  swap: ({
    askAssetInfo,
    beliefPrice,
    maxSpread,
    offerAsset,
    referralAddress,
    referralCommission,
    to
  }: {
    askAssetInfo?: AssetInfo;
    beliefPrice?: Decimal;
    maxSpread?: Decimal;
    offerAsset: Asset;
    referralAddress?: string;
    referralCommission?: Decimal;
    to?: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  updateConfig: ({
    params
  }: {
    params: Binary;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  updateFees: ({
    feeConfig
  }: {
    feeConfig: FeeConfig;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  proposeNewOwner: ({
    expiresIn,
    owner
  }: {
    expiresIn: number;
    owner: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  dropOwnershipProposal: (fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  claimOwnership: (fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  freeze: ({
    frozen
  }: {
    frozen: boolean;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export class WyndexPairClient extends WyndexPairQueryClient implements WyndexPairInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.receive = this.receive.bind(this);
    this.provideLiquidity = this.provideLiquidity.bind(this);
    this.swap = this.swap.bind(this);
    this.updateConfig = this.updateConfig.bind(this);
    this.updateFees = this.updateFees.bind(this);
    this.proposeNewOwner = this.proposeNewOwner.bind(this);
    this.dropOwnershipProposal = this.dropOwnershipProposal.bind(this);
    this.claimOwnership = this.claimOwnership.bind(this);
    this.freeze = this.freeze.bind(this);
  }

  receive = async ({
    amount,
    msg,
    sender
  }: {
    amount: Uint128;
    msg: Binary;
    sender: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      receive: {
        amount,
        msg,
        sender
      }
    }, fee, memo, _funds);
  };
  provideLiquidity = async ({
    assets,
    receiver,
    slippageTolerance
  }: {
    assets: Asset[];
    receiver?: string;
    slippageTolerance?: Decimal;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      provide_liquidity: {
        assets,
        receiver,
        slippage_tolerance: slippageTolerance
      }
    }, fee, memo, _funds);
  };
  swap = async ({
    askAssetInfo,
    beliefPrice,
    maxSpread,
    offerAsset,
    referralAddress,
    referralCommission,
    to
  }: {
    askAssetInfo?: AssetInfo;
    beliefPrice?: Decimal;
    maxSpread?: Decimal;
    offerAsset: Asset;
    referralAddress?: string;
    referralCommission?: Decimal;
    to?: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      swap: {
        ask_asset_info: askAssetInfo,
        belief_price: beliefPrice,
        max_spread: maxSpread,
        offer_asset: offerAsset,
        referral_address: referralAddress,
        referral_commission: referralCommission,
        to
      }
    }, fee, memo, _funds);
  };
  updateConfig = async ({
    params
  }: {
    params: Binary;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_config: {
        params
      }
    }, fee, memo, _funds);
  };
  updateFees = async ({
    feeConfig
  }: {
    feeConfig: FeeConfig;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_fees: {
        fee_config: feeConfig
      }
    }, fee, memo, _funds);
  };
  proposeNewOwner = async ({
    expiresIn,
    owner
  }: {
    expiresIn: number;
    owner: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      propose_new_owner: {
        expires_in: expiresIn,
        owner
      }
    }, fee, memo, _funds);
  };
  dropOwnershipProposal = async (fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      drop_ownership_proposal: {}
    }, fee, memo, _funds);
  };
  claimOwnership = async (fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      claim_ownership: {}
    }, fee, memo, _funds);
  };
  freeze = async ({
    frozen
  }: {
    frozen: boolean;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      freeze: {
        frozen
      }
    }, fee, memo, _funds);
  };
}
/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.26.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

export type AssetInfo = {
  token: {
    contract_addr: Addr;
  };
} | {
  native_token: {
    denom: string;
  };
};
export type Addr = string;
export type Binary = string;
export interface InstantiateMsg {
  asset_infos: AssetInfo[];
  factory_addr: string;
  init_params?: Binary | null;
  token_code_id: number;
}
export type ExecuteMsg = {
  receive: Cw20ReceiveMsg;
} | {
  provide_liquidity: {
    assets: Asset[];
    auto_stake?: boolean | null;
    receiver?: string | null;
    slippage_tolerance?: Decimal | null;
  };
} | {
  swap: {
    ask_asset_info?: AssetInfo | null;
    belief_price?: Decimal | null;
    max_spread?: Decimal | null;
    offer_asset: Asset;
    to?: string | null;
  };
} | {
  update_config: {
    params: Binary;
  };
} | {
  propose_new_owner: {
    expires_in: number;
    owner: string;
  };
} | {
  drop_ownership_proposal: {};
} | {
  claim_ownership: {};
};
export type Uint128 = string;
export type Decimal = string;
export interface Cw20ReceiveMsg {
  amount: Uint128;
  msg: Binary;
  sender: string;
}
export interface Asset {
  amount: Uint128;
  info: AssetInfo;
}
export type QueryMsg = {
  pair: {};
} | {
  pool: {};
} | {
  config: {};
} | {
  share: {
    amount: Uint128;
  };
} | {
  simulation: {
    ask_asset_info?: AssetInfo | null;
    offer_asset: Asset;
  };
} | {
  reverse_simulation: {
    ask_asset: Asset;
    offer_asset_info?: AssetInfo | null;
  };
} | {
  cumulative_prices: {};
} | {
  query_compute_d: {};
};
export interface MigrateMsg {}
export interface ConfigResponse {
  block_time_last: number;
  params?: Binary | null;
}
export interface CumulativePricesResponse {
  assets: Asset[];
  price0_cumulative_last: Uint128;
  price1_cumulative_last: Uint128;
  total_share: Uint128;
}
export type PairType = {
  xyk: {};
} | {
  stable: {};
} | {
  concentrated: {};
} | {
  custom: string;
};
export interface PairInfo {
  asset_infos: AssetInfo[];
  contract_addr: Addr;
  liquidity_token: Addr;
  pair_type: PairType;
}
export interface PoolResponse {
  assets: Asset[];
  total_share: Uint128;
}
export interface ReverseSimulationResponse {
  commission_amount: Uint128;
  offer_amount: Uint128;
  spread_amount: Uint128;
}
export type ArrayOfAsset = Asset[];
export interface SimulationResponse {
  commission_amount: Uint128;
  return_amount: Uint128;
  spread_amount: Uint128;
}
export type AstroportPairExecuteMsg = ExecuteMsg;